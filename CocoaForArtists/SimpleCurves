//
//  CFACanvas.h
//  CodeSamples
//
//	A Cocoa For Artists project
//  Created by Travis Kirton
//

#import "CFACanvas.h"
@interface CFACanvas (private)
-(float)sinGraph:(float)value;
-(float)quad:(float)value;
-(float)quadHump:(float)value;
-(float)hump:(float)value;
-(float)squared:(float)value;
@end


@implementation CFACanvas
-(void)setup {
	[self windowWidth:200 andHeight:200];
	[self background:0];
	[CFAShape noFill];
	[CFAShape strokeWidth:1];
}

-(void)draw {
	[CFAShape stroke:155];
	[CFAShape beginShape];
	for(int i = 0; i < [self width]; i++) {
		float value = [self sinGraph:((float)i/[self width])]*[self height];
		[CFAShape vertexAtX:i Y:value];
	}
	[CFAShape endShape];
	
	[CFAShape stroke:180];
	[CFAShape beginShape];
	for(int i = 0; i < [self width]; i++) {
		float value = [self quad:((float)i)/[self width]]*[self height];
		[CFAShape vertexAtX:i Y:value];
	}
	[CFAShape endShape];
	
	[CFAShape stroke:205];
	[CFAShape beginShape];
	for(int i = 0; i < [self width]; i++) {
		float value = [self quadHump:((float)i)/[self width]]*[self height];
		[CFAShape vertexAtX:i Y:value];
	}
	[CFAShape endShape];
	
	[CFAShape stroke:230];
	[CFAShape beginShape];
	for(int i = 0; i < [self width]; i++) {
		float value = [self hump:((float)i)/[self width]]*[self height];
		[CFAShape vertexAtX:i Y:value];
	}
	[CFAShape endShape];
	
	[CFAShape stroke:255];
	[CFAShape beginShape];
	for(int i = 0; i < [self width]; i++) {
		float value = [self squared:((float)i)/[self width]]*[self height];
		[CFAShape vertexAtX:i Y:value];
	}
	[CFAShape endShape];
}

-(float)sinGraph:(float)value {
	value = (value - 0.5) * 1.0; //scale from -1 to 1
	value = [CFAMath sin:(value*PI)]/2 + 0.5;
	return value;
}

-(float)squared:(float)value {
	value = [CFAMath pow:value raiseTo:2];
	// Following line is equal to the above line
	// value = value * value;
	return value;
}

-(float)quad:(float)value {
	value = [self squared:[self squared:value]];
	// Following line is equal to the above line
	// value = value * value * value * value;
	return value;
}

-(float)quadHump:(float)value {
	value = (value - 0.5) * 2; // scale from -2 to 2
	value = [self quad:value] * 16;
	return value;
}

-(float)hump:(float)value {
	value = (value - 0.5) * 2; // scale from -2 to 2
	value = [self squared:value];

	if(value > 1) {
		value = 1;
	}
	return 1 - value;
}
@end